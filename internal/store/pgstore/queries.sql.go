// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (
  "theme"
  ) VALUES (
  $1
  )
RETURNING "id"
`

func (q *Queries) CreateRoom(ctx context.Context, theme string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createRoom, theme)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getMessage = `-- name: GetMessage :one
SELECT
  "id", "room_id", "message", "answered", "reaction_count", "created_at"
FROM messages
WHERE id = $1
`

type GetMessageRow struct {
	ID            uuid.UUID
	RoomID        uuid.UUID
	Message       string
	Answered      bool
	ReactionCount int64
	CreatedAt     pgtype.Timestamptz
}

func (q *Queries) GetMessage(ctx context.Context, id uuid.UUID) (GetMessageRow, error) {
	row := q.db.QueryRow(ctx, getMessage, id)
	var i GetMessageRow
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.Answered,
		&i.ReactionCount,
		&i.CreatedAt,
	)
	return i, err
}

const getMessageAnswers = `-- name: GetMessageAnswers :many
SELECT
  "id", "message_id", "answer", "reaction_count", "created_at"
FROM answers
WHERE "message_id" = $1
`

func (q *Queries) GetMessageAnswers(ctx context.Context, messageID uuid.UUID) ([]Answer, error) {
	rows, err := q.db.Query(ctx, getMessageAnswers, messageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Answer
	for rows.Next() {
		var i Answer
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.Answer,
			&i.ReactionCount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoom = `-- name: GetRoom :one
SELECT
  "id", "theme"
FROM rooms
WHERE ID = $1
`

type GetRoomRow struct {
	ID    uuid.UUID
	Theme string
}

func (q *Queries) GetRoom(ctx context.Context, id uuid.UUID) (GetRoomRow, error) {
	row := q.db.QueryRow(ctx, getRoom, id)
	var i GetRoomRow
	err := row.Scan(&i.ID, &i.Theme)
	return i, err
}

const getRoomMessages = `-- name: GetRoomMessages :many
SELECT
  "id", "room_id", "message", "answered", "reaction_count", "created_at"
FROM messages
WHERE "room_id" = $1
ORDER BY "created_at" DESC
`

type GetRoomMessagesRow struct {
	ID            uuid.UUID
	RoomID        uuid.UUID
	Message       string
	Answered      bool
	ReactionCount int64
	CreatedAt     pgtype.Timestamptz
}

func (q *Queries) GetRoomMessages(ctx context.Context, roomID uuid.UUID) ([]GetRoomMessagesRow, error) {
	rows, err := q.db.Query(ctx, getRoomMessages, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRoomMessagesRow
	for rows.Next() {
		var i GetRoomMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.Message,
			&i.Answered,
			&i.ReactionCount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRooms = `-- name: GetRooms :many
SELECT
  "id", "theme"
FROM rooms
`

type GetRoomsRow struct {
	ID    uuid.UUID
	Theme string
}

func (q *Queries) GetRooms(ctx context.Context) ([]GetRoomsRow, error) {
	rows, err := q.db.Query(ctx, getRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRoomsRow
	for rows.Next() {
		var i GetRoomsRow
		if err := rows.Scan(&i.ID, &i.Theme); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMessage = `-- name: InsertMessage :one
INSERT INTO messages
  ("room_id", "message") VALUES
  ( $1, $2 )
RETURNING "id"
`

type InsertMessageParams struct {
	RoomID  uuid.UUID
	Message string
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertMessage, arg.RoomID, arg.Message)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertMessageAnswer = `-- name: InsertMessageAnswer :one
INSERT INTO answers
  ("message_id", "answer") VALUES
  ( $1, $2 )
RETURNING "id"
`

type InsertMessageAnswerParams struct {
	MessageID uuid.UUID
	Answer    string
}

func (q *Queries) InsertMessageAnswer(ctx context.Context, arg InsertMessageAnswerParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertMessageAnswer, arg.MessageID, arg.Answer)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const markMessageAsAnswered = `-- name: MarkMessageAsAnswered :exec
UPDATE messages
SET
  ansewered = true
WHERE
  "id" = $1
`

func (q *Queries) MarkMessageAsAnswered(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, markMessageAsAnswered, id)
	return err
}

const reactToMessage = `-- name: ReactToMessage :one
UPDATE messages
SET
  reaction_count = reaction_count + 1
WHERE "id" = $1
RETURNING "reaction_count"
`

func (q *Queries) ReactToMessage(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, reactToMessage, id)
	var reaction_count int64
	err := row.Scan(&reaction_count)
	return reaction_count, err
}

const removeReactionToMessage = `-- name: RemoveReactionToMessage :one
UPDATE messages
SET
  reaction_count = reaction_count - 1
WHERE "id" = $1
RETURNING "reaction_count"
`

func (q *Queries) RemoveReactionToMessage(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, removeReactionToMessage, id)
	var reaction_count int64
	err := row.Scan(&reaction_count)
	return reaction_count, err
}
